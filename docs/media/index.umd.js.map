{"version":3,"file":"index.umd.js","sources":["../src/utils/capitalize.ts","../src/validation/createError.ts","../src/validation/createStandardErrors.ts","../src/predicates/isDate.ts","../src/validation/StandardErrors.ts","../src/predicates/isEqual.ts","../src/predicates/isEmpty.ts","../src/predicates/isString.ts","../src/predicates/isNumber.ts","../src/validation/normalizeErrors.ts","../src/validation/hasErrors.ts","../src/Validator.ts","../src/validate.ts","../src/state/ValidationState.ts"],"sourcesContent":["/** capitalise a string */\nexport function capitalize(value: string): string {\n  return !value ? value : value[0].toUpperCase() + value.substr(1);\n}\n","import { capitalize } from '../utils';\nimport { IErrors } from './IErrors';\n\n/** Creates a frozen error object\n *\n * @param not         when set will prefix the capitalised error key with 'not'\n * @param errorKey    key value for an error e.g. { someKey: true }\n * @param errorValue  value associated with the key e.g. { key: 'some value' }\n *\n * @returns           a frozen error object\n */\nexport function createError(\n  not: boolean,\n  errorKey: string,\n  errorValue: any = true\n): IErrors {\n  return Object.freeze({\n    [not ? `not${capitalize(errorKey)}` : errorKey]: errorValue,\n  });\n}\n","import { createError } from './createError';\nimport { IStandardErrorProviders } from \"./IStandardErrorProviders\";\n\n/** creates all standard errors\n *\n * @param not prefixes all capitalised keys with a 'not' e.g. { notNull: true }\n *\n * @returns standard errors\n */\nexport function createStandardErrors(not: boolean = false)\n  : IStandardErrorProviders {\n\n  return Object.freeze({\n    null: createError(not, 'null'),\n    number: createError(not, 'number'),\n    string: createError(not, 'string'),\n    equal: (to: any) => createError(not, 'equal', to),\n    maxLength: (max: number) => createError(not, 'maxLength', max),\n    minLength: (min: number) => createError(not, 'minLength', min),\n    max: (max: number) => createError(not, 'max', max),\n    min: (min: number) => createError(not, 'min', min),\n    includes: (value: any) => createError(not, 'includes', value),\n    matches: (re: RegExp | string) => createError(not, 'matches', re),\n  });\n}\n","/** checks value is a date */\nexport function isDate(value: any): boolean {\n  return !isNaN(Date.parse(value));\n}\n","import { createStandardErrors } from './createStandardErrors';\n\n/**\n * StandardErrors available\n *\n * including EMPTY and negated errors\n *\n * negated error keys are prefixed by 'not' e.g. { notNull: true }\n */\nexport const StandardErrors = Object.freeze({\n  EMPTY: Object.freeze({}) as any,\n  ...createStandardErrors(),\n  not: createStandardErrors(true),\n});\n","/** deep equality check */\nexport function isEqual(a: any, b: any): boolean {\n  if (a === b) return true;\n\n  if (a == null || b == null) return false;\n\n  if (Array.isArray(a)) {\n    return (\n      Array.isArray(b) &&\n      a.length === b.length &&\n      a.every((v, i) => isEqual(v, b[i]))\n    );\n  }\n\n  if (typeof a === 'object' || typeof b === 'object') {\n    const av = a.valueOf();\n    const bv = b.valueOf();\n    if (av !== a || bv !== b) return isEqual(av, bv);\n    return Object.keys({ ...a, ...b }).every((n) => isEqual(a[n], b[n]));\n  }\n\n  return false;\n}\n","import { StandardErrors } from '../validation/StandardErrors';\nimport { isEqual } from './isEqual';\nexport function isEmpty(a: any): boolean {\n  return (\n    a != null &&\n    a.constructor === Object &&\n    (a === StandardErrors.EMPTY || isEqual(a, StandardErrors.EMPTY))\n  );\n}\n","/** checks value is a string */\nexport function isString(value: any): boolean {\n  return typeof value === 'string';\n}\n","import { isString } from './isString';\n\n/** checks values is a number or a string which can be parsed into a number */\nexport function isNumber(a: any): boolean {\n  if (isString(a)) a = Number.parseFloat(a);\n  return !isNaN(a) && typeof a === 'number';\n}\n","import { IErrors } from './IErrors';\nimport { StandardErrors } from './StandardErrors';\n\n/** normalize a validation result, by removing empty sub-properties\n *\n * @param errors  any result from a validation function\n *\n * @returns       the result with empty sub-properties removed\n */\nexport function normalizeErrors(errors: IErrors | any): IErrors | any {\n  if (errors == null || typeof errors !== 'object') return errors;\n\n  return Object.keys(errors).reduce((result, key) => {\n    const value = normalizeErrors(errors[key]);\n\n    return value === StandardErrors.EMPTY\n      ? result\n      : {\n        ...result,\n        [key]: value,\n      };\n  }, StandardErrors.EMPTY);\n}\n\n/**\n * @deprecated use normalizeErrors\n */\nexport function normalize(errors: IErrors | any): IErrors | any {\n\n  return normalizeErrors(errors);\n}","import { isEmpty } from '../predicates';\nimport { IErrors } from './IErrors';\nimport { normalizeErrors } from './normalizeErrors';\n\n/** Checks an error object for errors optionally on a given path\n * \n * normalises the errors object first\n */\nexport function hasErrors(errors: IErrors, path?: string): boolean {\n\n  return _hasErrors(normalizeErrors(errors), path);\n}\n\nfunction _hasErrors(errors: IErrors, path?: string): boolean {\n  if (errors == null || isEmpty(errors)) return false;\n  if (!path) return true;\n\n  let i = path.indexOf('.');\n  if (i === -1) i = path.length;\n\n  return _hasErrors(errors[path.substring(0, i)], path.substring(i + 1));\n}","import {\n  StandardErrors,\n  IRule,\n  createError,\n  IStandardErrorProviders,\n  IErrors\n} from './validation';\nimport { isEqual, isNumber, isString } from './predicates';\n\nexport class Validator {\n  private readonly expected: IStandardErrorProviders;\n\n  constructor(private negate: boolean = false) {\n    this.expected = negate ? StandardErrors.not : StandardErrors;\n  }\n\n  get not(): Validator {\n    return new Validator(!this.negate);\n  }\n\n  /**\n   * value should be null\n   *\n   * @param a value\n   * @returns errors\n   */\n  null(a: any) {\n    return this.exec(a == null, this.expected.null);\n  }\n\n  /**\n   * value should be a number\n   *\n   * @param a value\n   * @returns errors\n   */\n  number(a: any) {\n    return this.exec(isNumber(a), this.expected.number);\n  }\n\n  /**\n   * value should be a string\n   *\n   * @param a value\n   * @returns errors\n   */\n  string(a: any) {\n    return this.exec(isString(a), this.expected.string);\n  }\n\n  /**\n   * values should be equal\n   *\n   * @param a 1st value to compare\n   * @param b 2nd value to compare\n   * @returns errors\n   */\n  equal(a: any, b: any) {\n    return this.exec(isEqual(a, b), this.expected.equal(b));\n  }\n\n  /**\n   * value should not me more than\n   *\n   * @param a value\n   * @param max maximum number value\n   * @returns errors\n   */\n  maxLength(a: string, max: number) {\n    return this.exec(a == null || a.length <= max, this.expected.maxLength(max));\n  }\n\n  /**\n   * value should not be less than\n   *\n   * @param a value\n   * @param min minimum number value\n   * @returns errors\n   */\n  minLength(a: string, min: number) {\n    return this.exec(a == null || a.length >= min, this.expected.minLength(min));\n  }\n\n  /**\n   * value should not me more than\n   *\n   * @param a value\n   * @param max maximum value\n   * @returns errors\n   */\n  max(a: number, max: number) {\n    return this.exec(a <= max, this.expected.max(max));\n  }\n\n  /**\n   * value should not be less than\n   *\n   * @param a value\n   * @param min minimum value\n   * @returns errors\n   */\n  min(a: number, min: number) {\n    return this.exec(a >= min, this.expected.min(min));\n  }\n\n  /**\n   * 1st value includes second\n   *\n   * @param a iterable value, eg string or array\n   * @param b value to find\n   * @returns errors\n   */\n  includes(a: any, b: any) {\n    return this.exec(a.includes(b), this.expected.includes(b));\n  }\n\n  /**\n   * value must match regex\n   *\n   * @param value string value\n   * @param re regular expression\n   * @param description error description\n   * @returns errors\n   */\n  matches(\n    value: string,\n    re: RegExp | string,\n    description: string = null\n  ) {\n    return this.exec(\n      new RegExp(re).test(value),\n      this.expected.matches(description || re)\n    );\n  }\n\n  /**\n   * value must pass the rule\n   *\n   * @param rule rule\n   * @returns errors\n   */\n  rule(rule: IRule) {\n    return this.exec(\n      rule.result,\n      createError(this.negate, rule.errorKey, rule.errorValue)\n    );\n  }\n\n  private exec<TFailure>(result: boolean, failure: TFailure): IErrors {\n    return (this.negate ? !result : result)\n      ? StandardErrors.EMPTY\n      : failure;\n  }\n}\n","import { Validator } from './Validator';\n\nexport const validate = new Validator();\n","import { isEqual } from '../predicates';\nimport {\n  ValidationErrors,\n  StandardErrors,\n  normalizeErrors,\n  IValidate, IValidateAsync,\n} from '../validation';\nimport { IValidationState } from './IValidationState';\n\n/** represents state for a value which is validated\n *\n *  useful for user facing components\n */\nexport class ValidationState<TValue> implements IValidationState<TValue> {\n  constructor(\n    /** validator function */\n    public readonly validate: IValidate<TValue> | IValidateAsync<TValue>,\n    /** value */\n    public readonly value: TValue = null,\n    /** validation errors, will be normalized */\n    errors: ValidationErrors<TValue> = StandardErrors.EMPTY\n  ) {\n    if (validate == null) throw new Error('validate is required');\n\n    this.errors = normalizeErrors(errors);\n    this.invalid = this.errors !== StandardErrors.EMPTY;\n  }\n\n  /** validation errors */\n  readonly errors: ValidationErrors<TValue>;\n  /** state is invalid */\n  readonly invalid: boolean = false;\n\n  /** if there are changes calls validation and sets errors and invalid properites\n   *\n   * @param value     value to validate if changed\n   * @param onChange  a function called when change is made\n   * @returns         a new state object if there is change, same if not\n   */\n  async set(\n    value: TValue,\n    onChange?: (newState: ValidationState<TValue>) => void\n  ): Promise<ValidationState<TValue>> {\n    if (isEqual(this.value, value)) return this;\n\n    const errors = await this.validate(value);\n    const newState = new ValidationState<TValue>(this.validate, value, errors);\n\n    if (onChange) onChange(newState);\n\n    return newState;\n  }\n}\n"],"names":[],"mappings":"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"}